#!/usr/bin/env python

import argparse
import os
import sys

parser = argparse.ArgumentParser(description='Clean unused figures from a latex \
                                              project.')
parser.add_argument('lfile', metavar='lfile', type=str, 
                    help='file path to main file of the latex project')
parser.add_argument('directory', type=str, help='directory where figures are \
                                                 stored')
parser.add_argument('--recursive', '-r', action='store_true', 
                    help='flag for searching for figures recursively')
parser.add_argument('--verbose', '-v', action='store_true',
                    help='print out information')
parser.add_argument('--dryrun', '-d', action='store_true',
                    help='do a dry run; do not remove anything')

args = parser.parse_args()

try:
    lfile = open(args.lfile, 'r')
except:
    print('Could not open: ', args.lfile, file=sys.stderr)
    exit(-1)

def remove_fig(path, fignames, verbose=False, dryrun=False):
    filename = path.split('/')[-1]
    idx = filename.rfind('.')
    rootname = filename[:idx]
    if rootname not in fignames:
        if verbose:
            print('Removing      ', path)
        if not dryrun:
            os.unlink(path)
    else:
        if verbose:
            print('Not removing  ', path)

def remove_figs_recursively(fignames, path, verbose=False, dryrun=False):
    if os.path.isdir(path):
        for subpath in os.listdir(path):
            remove_figs_recursively(fignames, os.path.join(path, subpath),
                                    verbose, dryrun)
    elif os.path.isfile(path):
        remove_fig(path, fignames, verbose, dryrun) 

igstr = r'\includegraphics'

fignames = []
for line in lfile:
    idxstart = line.find(igstr)
    while idxstart != -1:
        idxend = line.find('}', idxstart)
        fignames.append((line[idxstart+len(igstr)+1:idxend]).split("/")[-1])
        idxstart = line.find(igstr, idxend+1)

if args.verbose:
    print("Figure names: ", fignames)

if args.recursive:
    remove_figs_recursively(fignames, args.directory, args.verbose, args.dryrun)
else:
    for path in os.listdir(args.directory):
        if os.path.isfile(path):
            remove_fig(fignames, path, args.verbose, args.dryrun)
